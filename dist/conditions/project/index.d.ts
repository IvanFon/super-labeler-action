import { Issues, Project, PullRequests } from "../../contexts";
import { Condition } from "../util";
import { ConditiononColumn } from "./onColumn";
export declare type ProjectCondition = Condition | ConditiononColumn;
export declare function getProjectConditionHandler(this: Issues | PullRequests | Project, condition: ProjectCondition): ((this: import("..").UtilThis, condition: import("../util/creatorMatches").ConditionCreatorMatches, issue: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/descriptionMatches").ConditionDescriptionMatches, issue: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/isOpen").ConditionIsOpen, issue: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/isStale").ConditionIsStale, issue: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/isAbandoned").ConditionIsAbandoned, issue: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/hasLabel").ConditionHasLabel, issue: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/titleMatches").ConditionTitleMatches, issue: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/and").ConditionAnd, props: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/or").ConditionOr, props: import("..").UtilProps) => boolean) | ((this: import("..").UtilThis, condition: import("../util/only").ConditionOnlyOne, props: import("..").UtilProps) => boolean) | ((this: PullRequests | Issues | Project, condition: ConditiononColumn, pr: import("..").ProjectProps) => boolean) | undefined;
export { ProjectProps } from "..";
//# sourceMappingURL=index.d.ts.map